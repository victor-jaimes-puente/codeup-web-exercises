Code up Jan 2020

In class notes and questions

Jan 13 2109

Intro to CSS

In order to link external CSS use following in  head element

*<link rel="stylesheet" href="css/site.css">
*


----------
Selectos for CSS

Element : name of element

ID : name of the ID, preceded by a #

Class : name of class preceded by a .


————
Jan 13 2122 //Stopped: CSS Properties and Selectors : Multiple Selectors.

-----------

Jan 14 2020

In class 0854

Received Welcome to CU packet, two sheets of paper.

" If we keep doing what were doing, were going to keep getting what were are getting"

First lesson will be HTML elements

"The secret to building great products is not creating awesome features, its to make your user awesome"

Duck concept: talk it out with your duck, say it out loud so that you may get a answer without actually talking to some one.

If that fails, google it. (Lol)

---------

Setting up Github Vivian is giving class.

Research CSH***

Got a link from vivian .1

https://github.com/gocodeup/codeup-setup-script

Went down to For students and was told to copy code in box . 2

bash -c "$(curl -sS https://raw.githubusercontent.com/gocodeup/codeup-setup-script/master/install.sh)"

Zack came in and had me run some code will look it up. I could not find the actual code, I thought I could look it up in the terminal but the screen was cleared when I ran a different code.
	I will stick to just relying on them to help re-setup Beverlys laptop. I will read ahead a bit in this HTML elements since that's what were supposed to cover today.


Vivian commented n Appendix on CU website.

Visited edabit

Visited code wars

Visited code camp

Set up inteliJ

Moved home folder to favs

Create test folder

Moved idea folder to favorites

----------
GIT AND GIT HUB

Git is a version control system

70 percent of students use git and git hub
Tracks all changes made to a file.

Commit message: statement of what was changed. History for your GitHub

"I changed this because of xyz"

Working directory >Git add > staging area >Git commit > local repo > git push > remote depo

Remote depo > git pull > local repo > git checkout > working directory

LUNCH

Now you can have unlimited repositories with micro soft

* Version control
Keeps tracks of all versions or edits

Can serve as a time machine, if we want to go back to a previous version .

Parallel universes: should not be working on master branch.
    MasterBranch: live version.

If your code is not on gitHub it does not exist (backUp)

PUSH WORK EVERY DAY *

Backed up work is greater than perfect work.

Commit messages should explain what changed and why.

FIRST TIME SET UP ****************************************

Open test folder
Open terminal
Current directory: pwd

.gitignore file creation:(

Right clicked *test-folder


New file
New file name: .gitignore

.idea/*
*.iml
.DS_STORE (case sensitive)

These files will be skipped)

In order to initialize: *git init

Status: * git status

Right click Folder > create html file.

Add all file : * git add .

Add commit message: * git commit -m"initial commit"

Can't push yet because we have not set up a connection between local and GitHub.

Git hub. > plus sign > new repository

Name and describe .
Create rep.

Toggle to SSH link

On browser follow directions for creating existing repository from command line.

******

1.Ensure you are in correct folder
2.* git status
3.git add (name of file)
4.git add . Will add all files that have changes made to them.
(3 and 4 are one or the other)
5. * git commit -m "comment" : will prepare files to be submitted.
6. *git push : will upload all prepared files.

**************

Created a new folder named :
Code-web-exercies.

New file: .gitignore

.idea/*
*.iml
.DS_STORE

***********

console:
* git init

* git add .

Go to GitHub create a new repository

Copy to console both lines in order

* git push

*************

Will be creating folder for pulling from codeup

Cloning will allow you to copy everything including settings.


Copied url from GitHub which will be used to create a path so that we may pull

FILE
NEW
PROJECT FROM VERSION CONTROL
Paste URL
Double check directory
CLONE
Open in new window

*************
Code up web exercises - Mine(push)
Fortune web exercises - CU (pull)

----------------------------------

Jan 15 2020

Arrived at 0730

Walked here today and I loved it.

Today we will be covering :
HTML ELEMENTS
HTML FORMS
------------------------------

David teaching HTML


Git add
Git commit
Git push



Block level elements :
If block the "box" will go all the way
Across the page.

Other will have specified dimensions.

Option + shit = equals CTRL in windows


*** Images ***

Image tag is different because it has no closing tag.

Src tag will be used to dictate relative pathway to image file.

Alt will be used to describe image for disabled users.

***List**

* ol : numbered

* ul : un numbered

* li : list item : li * 8 will create 8 list items.

* hr : creates a line across page, also page break. (Can change color with CSS)
***Semantic Elements***

* div : helps organize elements : can use * id = * to name.

* header, nav, main, article, section, aside, footer,
All work the same as div, but semantically they have independent uses in the sense that they are used for conveying more information for the disabled, and for simplicity when coding.
* main : main content :
* we can use div, but its better to work with semantic elements.

***Text styles built in***

* em : emphizes text

* strong : bold

*** SRC and Ankors

* <a href = ""> : will always require href. In-between tags text that is to be displayed	will be input.
	* target = "blank" : will open new tab.
***Tables***

* table :

* tr : table row
* th : table header : will create column : will bold text
		* td: table data


***HTML forms***
 Open console : cmd option I

Method: http method that should be used, will auto set to GET
GET: will add request to URL, will request information.
POST: Will change data on the server - data is not added to the url.
ACTION: Defines what data gets sent - If no data is specified the data is sent back to the URL.

Resources: w3 - MDN docs (mozilla)

QueryStrings: ?key1=value1&key2=value2&key3=value3 - if you have multiple key value pairs separate with & - begins with question mark.

Submitting: Buttons allow us to be more creative rather than an imputes type of

***Creating a form*

Create form

Insert url in to action.

Add method: GET or POST

Create your input

*<form action = "url" method="GET">
	<label for="zipcode-input">Enter you Zipcode:</label>
	<input type="text" id="zipcode" placeholder="enter zip code">
	<button type="submit">Submit</button>
Key: name is what you are asking for, value is what is entered

***Radio buttons***

Name must match on all radio buttons since they are all working together. For example in a multiple choice question.

####
When creating a label the *for= will identify what its labeling, so when you create an input you must match the *id= with the *for form the label.

You can wrap a label around a checkbox.

<label>
Checkbox
</label>

***exercise***
Use hook bin instead of Request inspector.
---------------------------------------------


CSS FLOAT : Mainly used for wrapping text around objects.

Positioning:

Top bottom right and left

Position relative: block is still respected only the visual representation is the only thing changes.

Absolute Positioning: breaking element out document flow. No longer respects original block.
Ignores the rest of the elements around it, overlaps them.
When scrolling still goes up with page.
The positioning itself will be dependent of the container it is in.
You can absolutely position an object within a relative container, which will allow you to position the object anywhere within that container rather than the entire document.

Fixed Positioning: Have you ever seen page elements that do not move even when the page is scrolled? These elements have position:fixed applied, which causes them to be positioned relative to the browser window.

Simpler to set only the x axis or y axis only



* #id p

* h1 .class

-------------------------

The code doesn't lie, I've noticed that even when its lying, the code doesn't lie.

------------------------
Jan 22 2020

***EMMITT ABBREVIATION***:

* div.flex-items#${flex item $}*(number) // creates new ID,numbered, can add custom name before dollar sign. Will multiply based on (number) input.

***FLEXBOX*** quick visual: http://flexbox.malven.co/
-Hard Coding: fix (data or parameters) in a program in such a way that they cannot be altered without modifying the program.

First thing we must do is declare we are using flexbox.
By default flex items are arranged in a row.

* display:flexbox; * in parent div.

Different properties we can apply to the CONTAINER ITSELF:

* flex-direction: > * row-reverse * row * column * column-reverse *
* justify-content: > * flex-end * center * space-between * space-around * space-evenly *
* align-items: > * center * flex-end * flex-start * stretch * baseline // requires condition: different box sizes/font // centers items based on FONT *
* flex-wrap: // requires overflow within container * > * nowrap // default * wrap-reverse * wrap *
* align-content: * > * center * flex-start * flex-end * space-evenly * space-between *

Different properties we can apply to the ITEM ITSELF:

* order: > (number of order)// can modify the order of the item within parent container // if no order is input will default to (0) // if you want to group items asing same value *
* align-self: > * center * flex-start * flex-end * stretch * // if no align-self is input default is stretch *
* flex-grow: > * 1 * 2 * // modifies the the size of the item in order to fill container space *
* flex-basis: > // can give items starting size * auto * (pixel/em/etc.) * max-content * min-content * fit-content * fill * inherit * initial * unset *

***FLEX BOX 2 ***
* FlexBox allows you to align an items vertically and horizontally way faster.

* margin: 0 auto * // centers content horizontally *

* margin-left: / margin-right: > * auto (first item) * // allows dev to create specific amount of space in-between specific items.

^ need more research on this topics.

************* BOX SIZING *********** // It is often useful to set box-sizing to border-box to layout elements. This makes dealing with the sizes of elements much easier, and generally eliminates a number of pitfalls you can stumble on while laying out your content.  On the other hand, when using position: relative or position: absolute, use of box-sizing: content-box allows the positioning values to be relative to the content, and independent of changes to border and padding sizes, which is sometimes desireable.

* box-sizing // automatically adjust either the content box or the padding/margin around an item to meet which ever specifications are given to it.

* border-box // tells the browser to account for any border and padding in the values you specify for an element's width and height. If you set an element's width to 100 pixels, that 100 pixels will include any border or padding you added, and the content box will shrink to absorb that extra width. This typically makes it much easier to size elements.

* content-box // gives you the default CSS box-sizing behavior. If you set an element's width to 100 pixels, then the element's content box will be 100 pixels wide, and the width of any border or padding will be added to the final rendered width, making the element wider than 100px.

***** Background image adjust to page size example: ****
 * background: url(../images/travelHat.jpg) center / cover no-repeat;*


---------------------

NTH TYPE :

* change background of container so that you can ID correct area

* familiarize yourself with html structure

* might have to do hard refresh if css does not update.

--------------------
Programming is more about practicing than studying - a little bit of studying but a lot of practice" - Luis M
----------------------

Font awesome: source for fonts/logos.

-----------------------
*** CSS GRID ***

* display:grid; // required IOT display grid.
* display:inline-grid; // only displays rows and columns.
*

* grid generator: https://cssgrid-generator.netlify.com/

* start y /start x /finish y /finish x; * // this is the way grid coordinates are expressed in CSS grid.
// the end number is one less than what is displayed: this is because its saying "this ends at the beginning of "
* .div1 { grid-area: 1 / 1 / 2 / 11; } * // this would read " div1 = (Y1 - y1) and (x1 - x10) "

* can create a grid within a grid, within a grid etc.
// will begin using grid generator but with time will not rely on it as much.

* grid-template-columns: 200px 200px 200px; * // sets up 3 columns with the width of 200px *
// can also be done this way >>>>
*  grid-template-columns: * >
* repeat(x, y); * x = columns * y = width *
* grid-gap: size; * // sets the space in-between cells.
* grid-column-gap: (size); // sets space in-between columns
* grid-row-gap: (size); // sets space in-between rows.
* grid-template: repeat(x, y)/repeat(x, y); // sets rows and columns in one line // row then column

*** Placing Items on Grid ***

EXAMPLE
        .one {grid-area: 1 / 1 / 2 / 2}
        .two {grid-area: 1 / 2 / 2 / 3}
        .three {grid-area: 1 / 3 / 2 / 4}
        .four {grid-area: 2 / 1 / 3 / 2}
        .five {grid-area: 2 / 2 / 3 / 3}
        .six {grid-area: 2 / 3 / 3 / 4}
        .seven {grid-area: 3 / 1 / 4 / 2}
        .eight {grid-area: 3 / 2 / 4 / 3}
        .nine {grid-area: 3 / 3 / 4 / 4}
EXAMPLE

* coordine -1 represents the end of the row or column.

* // If two items have the same coordinates they will be stacked in the order of the code.

* // in order to have a div extend set the initial coordinate then tell it to go to the end with -1 // start at the beginning go to the end.

* // wrapper: identifies the Size of the container and its properties.
* // within the class of the element being styled and laid out the coordinates will be determined in the form of grid area IOT identify where the item itself will be placed within the grid of the Wrapper.*

* //with grid we don't have to be as exact with the details of the design, but if we want to we can modify it as necessary	.

BUILT OUT layout 1 6 and 11

Recreate desktop

-----------------------------

*** CSS 2 ***

Bootstrap FrameWork
* note * // * content: * > * sets up text that will be displayed on page the same way html would but used to specify alternative content when screen size is adjusted.

* Fixed Layout : specified in hardcoded pixel values.
* fluid layout : the layout is specified in percentages, BUT DOES NOT change based on screenSize .
* responsive layout : uses media queries to change based on screen size.

* Setting ViewPort : // add meta within head
*
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- ... -->
</head>
*

	$$ MEDIA QUEIRES $$

// allow you to make specific css responsive to viewable are of window.

* // if larger than 500 pixels do this //
/* screen sizes 500px and up */
@media screen and (min-width:500px) {
    selector {
        property: value;
    }
}

* // if size is between x and x do this //
/* screen sizes between 960px and 1200px */
@media screen and (min-width:960px) and (max-width:1200px) {
    /* ... */
}
*

	$$ BREAK POINTS $$ // major resolution changes which usually BREAK and reposition major elements. Based on most frequent used break points or custom sets can be used.

* example
/* Small devices (tablets, 768px and up) */
@media screen and (min-width:768px) { /* ... */ }

/* Medium devices (desktops, 992px and up) */
@media screen and (min-width:992px) { /* ... */ }

/* Large devices (large desktops, 1200px and up) */
@media screen and (min-width:1200px) { /* ... */ }
*

	$$ MOBILE FIRST APPROACH $$
// If we build for mobile first it will ensure our webpage is compatible with everything off the bat.

_________

Paired Programming :

Driver and navigator


------------------------------------

*** Intro To Boot Strap ***

Materialize : by google.

We will be using bootstrap 4 be sure to specify during searches

For bootstrap we will be using a CDN: content delivery frame work

Bootstrap CSS goes first, then our custom css

Bootstrap components are small pieces of a page

Chose what you need, copy it,

Paste in nav bar can modify within code that was pasted

In bootstrap grid: columns bust be in a div class row.

* <div class="row" >Simple Words</div> *

In boostrap the class abbreviation dictate the grid properties. For example * col- * represents the breakpoint for extrasmall screen. * col-sm * represents the breakpoint for a small screen.

The grid is based on multiples of 12

Box shadow gives your page a 3d look for elements.

In order to apply the shadows add it to the class input area
--------------------------------------------------------------

Gettin Git Bonus


<!--header-->
<!--will use jumbotron will move button to top of page and replace it with "LogIn"-->

<!--intro-->
<!--Will use a intro container for text -->

<!--introVid-->
<!--Need to search bootstrap for video options-->

<!--aboutCourse-->
<!--Need to make 5 cards with bootstrap template-->

<!--there'sMore-->
<!--Need to make 3 cards-->

<!--getGettinGitCards-->
<!--3 cards with different dimenssions -->

<!--frequentlyAskedQuestions-->
<!--will use container for text will style with inline CSS-->

<!--whoIsJmac?-->
<!--will use an image card from bootsrap-->





Action Bikes

---------------------
***BOOTSTRAP GRID***

We'll start by putting all of our content in a container, then define a row, which will contain multiple columns.

*
<div class="container">
    <div class="row">
        <div class="col-md-6">
            Content goes here....
        </div>
    </div>
</div>

*

The content in the div with the class of col-md-6 will take up 6 columns (i.e. 50% width) on any medium or larger sized screen. On screens smaller than medium, the content will take up the full width.

In general, Bootstrap's column classes follow this naming convention:
*
col-*-*
*
Where the first star is one of sm, md, lg, or xl to indicate the screen size, and the second star is a number between 1 and 12 to indicate the number of columns. (You can also omit the screen size to always have columns regardless of screen size).

Different screen sizes can be combined
*
<div class="col-lg-3 col-md-6">
*

<div class="container">
-------------------------------

How to succeed at codeup:

----------
Cant find a mentor for business.
Connecting mentors with entrepernuers
A database which connects social media accounts and users based on mentor status or mentee and connect each other based on industry and location of interest.

Finding a clean restroom is a hassle.
Use a yelp style app for rating restrooms.
Partners could offer coupons to those who contribute in the building of this database, helps end user find a clear restroom and, also helps business acquire more foot traffic.

Fighting specific fears can be difficult.
Connect users who live extreme lifestyles with those who want to overcome a fear.
User will be connected based on interest and fears, they will coordinate in order to engage in activity.

------------------------------------
Divorce Party 2020

Recently divorced in SA area.
Within a year.

Mixer

This Saturday

Hotel Lobby

In order to re connect recent divorcees;

----------------------------------------

JS

In JS an empty string has the value of false
A string with content has the value of true.

When asking * .indexOF(x): * and get a return of * -1 * that means that it could not find it.

* var classfull = false;
* var classAtEight = false;
* var studentCanSignUp = !classFull && !classAtEight;

* returns true *

var strongPassWord = password.length >= 5 && password.indexOf(username) === -1 && username.length <= 20 && username.trim() === username && password.trim() === password

-----------------------------------------

HMTL and JS

Console log : used for testing.

Inline JS

If using inline JS must insert JS code within
* <script> </script> * tags

External JS : JS which is added to an external JS file.
Its better because it makes it more : Maintainable, readable, usable. ( keeping your code "dry" )

<script src="js/external.js"></script>

Inside of external JS page script tags are not needed.

* "use strict"; * : forces js to error check more than normal. Should use it all the time. Auto error checking.

-	 - 	- 	-	-	-	-	-	-	-	-


Built in user interaction:

Alert: dialog pop up message
	* alert("you are a winner"); *

Confirm: confirms before action is taken.
	* confirm("Are you still watching?"); *
	Will return a true or false in the console.
	Optional to use it as a variable.

Prompt: User interaction user prompt.
	 * userPrompt("what is your favorite animal?"); *

Var fullClass = false
Var Time	= false

-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

***Functions***

Parameter vs Argument

    Parameter : Place holder or variable.
    Argument : the input that actually goes in to the function when called.

    After * return * the rest of the code will not be read.

*note*
    When writing a function and don't use a * return * it will not be referenced.
    For example if you console log you will not be able to use that information if trying to use later.

Global variables vs local local variables
    LocalVariable: variable declared within a function will not be able be referenced by other function
        local variables will trump global variables if named the same, but only within the function.
    Global: Declared outside of the function, can be used by all functions.
*note*
    Best practice is to use local variables.
    AVOID GLOBAL VARIABLES

Immediately-Invoked Function
    An Immediately-Invoked Function Expression (IIFE) is a tool that allows us to keep our variables isolated.
        // define a function and immediately invoke (i.e. call) it
       *
        (function () {
            var iffeVar = "I'm local to the IIFE.";
        })(); *

        alert(iffeVar); // undefined
        *
    Your JS should always be within an IIFE. This is like the * "usestrict"; * should always be used in order to be safe
    and keep un necessary information in to the global scope.

     -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

        Git Branches ***

        Create a new branch : * git branch "nameOfBranch" *
        See all branches: * git branch *
        Swap branch : * git checkout "nameOfBranch" *

        *
        git checkout master
        git pull origin master
        git merge "nameOfBranch"
        'ctrl + x'

        create a new branch and switch right over to it. :
        *
        git checkout -b "name of branch"
        *

-   -   -   -   -   -   -   -   -   -   -
*** Conditionals ***

If Else :

    // Following an if statement, you can have an else statement. The code in the else statement will get executed when the condition in the if statement evaluates to false.
        *
        // if/else example
        if (condition) {
            // code here gets executed if condition evaluates to true
        } else {
            // code here gets executed if condition evaluates to false
        }
        *

    // One can chain multiple else conditions by using * else if *
        *
        // if/else if/else example
        if (condition1) {
            // code here gets executed if condition1 evaluates to true
        } else if (condition2) {
            // code here gets executed only if condition1 is false *and*    condition2 evaluates to true
        } else {
            // code here gets executed if neither condition1 nor condition2 evaluate to true
        }
        *
      ## NOTE ## : The final * else * statement is not needed here ^^

     // var homeworkIsDone = true;
        if (homeworkIsDone ) {
        * code *
        }
        *
ELSE STATEMENT

    if so, do this, ELSE do this.






ternary operators : used for very large files where you have to repeat the same if statement over and over

*** Switch staements *** Cleaner
*
switch(pizzaPreference) {
    case "pineapple and hot sauce":
        alert("What a coincidence, that's my favorite!");
        break;
    case "cheese":
        alert("Just plain cheese? Okay...");
        break;
    default:
        alert(pizzaPreference + " isn't my favorite, but let's order some!");
        break;
}
*

//case : does the same thing as  * if *
//break : included so that once the match is found the function stops searching.
//default : does the same as * else *, good practice to add * break * after * default *
CONVERTING IF ELSE TO SWITCH
* IF ELSE
var pizzaPreference = prompt("What kind of pizza do you like?");

switch(pizzaPreference) {
    case "pineapple and hot sauce":
        alert("What a coincidence, that's my favorite!");
        break;
    case "cheese":
        alert("Just plain cheese? Okay...");
        break;
    default:
        alert(pizzaPreference + " isn't my favorite, but let's order some!");
        break;
}
*

* SWITCH
var pizzaPreference = prompt("What kind of pizza do you like?");

switch(pizzaPreference) {
    case "pineapple and hot sauce":
        alert("What a coincidence, that's my favorite!");
        break;
    case "cheese":
        alert("Just plain cheese? Okay...");
        break;
    default:
        alert(pizzaPreference + " isn't my favorite, but let's order some!");
        break;
}

*
SWITCH TO FUNCTION

var pizzaChoice = (prompt("What kind of pizza do you like?")).toLowerCase();
console.log("User pizza input: " + pizzaChoice);

function pizzaMessage(pizzaPreference) {
    var pizzaConfirmation; // string with confirmation message

    switch(pizzaPreference) {
        case "pineapple and hot sauce":
            pizzaConfirmation = "What a coincidence, I love that one too";
            break;
        case "cheese":
            pizzaConfirmation = "Just plain cheese... okay.";
            break;
        case "ham":
            pizzaConfirmation = "Ham is easy to spell and awesome";
            break;
        default:
            pizzaConfirmation = pizzaPreference + " isn't my favorite, but let's order some.";
            break;
    } // end of switch

    return pizzaConfirmation;
}
*


-   -   -   -   -   -   -   -   -   -   -   -   --  -   -   -

IOT clone :
Github >> repository page >> click clone or download >> copy link
intelij -> file -> new -> project from version control >> paste link in to url section.



git checkout -b victor-jaimes-puente
git branch // showed branch name
// made a change
git status // saw the change
git add
git commit

// THIS IS WHAT IS DIFFERENT
git push origin victor-jaimes-puente

READ THE READ ME!!!!!

index.html is where you can access the testor >> got to spec list : Will show you why the code is not working

When wanting it to go green refresh over and over just incase

----    -   -   -   -   -   -   -   -   -   -

In addition to Number() there are two specialized functions that are more forgiving:

parseInt: attempts to convert a string to an integer value
parseFloat: attempts to convert a string to a floating point (i.e. decimal) value

-   -   -   -   -   -   -   -   -   -   -
In JavaScript, strings are immutable, meaning they will not change. We can update a variable that holds a string to contain a different string, but the original string object is not changed.

In addition, all of the methods above will not modify the original string, instead they produce a new string. Notice in the code block below how the variable is not changed:


var myString = 'javascript is cool!';
myString.toUpperCase(); // 'JAVASCRIPT IS COOL!'
myString; // 'javascript is cool!'

-   -   -   -   -   -   -   -   -   -   -

Anonymous Functions
Including a name for our functions is actually optional. To define a function we can also create an anonymous function (that is, a function without a name), and store it in a variable.


var increment = function(x) {
    return x + 1;
};

var two = increment(1);

-   -   -   -   -   -   -   -   -   -   -   -   -

Arguments / Parameters
We have been using these terms already, but formally, an argument is the value that a function is called with, and a parameter is part of the function's definition. A function is defined with zero or more parameters and called with zero or more arguments.

So far, we've just defined a function with a single input. Let's look at an example of multiple different inputs.

 If a function is defined with zero parameters, all arguments passed to the function will be ignored. Similarly, if a function does not have a return statement, the return value will be undefined.

-   -   -   -   -   -   -   -   -   -   -
While Loops
A while loop is a basic looping construct that will execute a code block as long as a certain condition is true. For example:

Syntax:


while (/*condition*/) {
    // body
}
-   -   -   -   -   -   -   -   -   -   -   -   -

Do While
A do-while loop is only different from a while in that the condition is evaluated at the end of the loop instead of the beginning. For example:

Syntax:


do {
    //body
} while(/*condition*/);

-   -   -   -   -   -   -   -   -   -
Page that shows how to create a function that will check what type of data the input is :

https://webbjocke.com/javascript-check-data-types/

-   -   -   -   -   -   -   -   -   -   -   -   -

Will get link on slack, open link
file, new from version control
create a new branch with

Inteli J copuons


https://github.com/CodeupClassroom/fortuna-first-js-assessment
-   -   -   -   -   -   -


/*********************************************
 *             ** TEST DRIVEN DEV **
 *********************************************/
1. Step 1: Write the smallest possible test: Identify the simplest, smallest thing you want to confirm. For example, before a function exists, assert that the function is defined.
2. Step 2: Run all the tests to ensure that the new test fails. We're **supposed** to see a red, failing test, since there's no code yet to green it. Red means we did the first step correctly. Seeing the newest test turn red is critical because our tests drive the development, not the other way around.
3. Step 3: Write only enough code to green that newest test. No more, no less. It's OK if things are hard-coded here.
4. Step 4: Run all tests. We're looking for green tests across the board.
5. Step 5: Refactor the code.
6. Step 6: Repeat the process by going back to Step 1. The repeat step means  following the steps to add new tests.
7. Overview: This entire TDD workflow is often explained as the repetition of "Red, Green, Refactor". This encapsulates the idea of writing a single, small failing test, writing only enough code to green the test, and then to refactor, when possible.

## Three Laws of Test Driven Development
- You are not allowed to write any production code unless it is to make a failing unit test pass.
- You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.
- You are not allowed to write any more production code than is sufficient to pass the one failing unit test.
--  -   -   -   -   -   -   -   -



Creating a new branch
Git status
git checkout -b "Name of new branch" : creates a new branch
git add .
git git commit
git push origin "Name of Branch"
create git pull request

got back to codeupWebExercise
git checkout master
git pull origin master

checkout back to testBranch
git merge master

--- -   -   -   -   -   -   -   -
/*********************************************
 *               LOOPS
 *********************************************/


Loops are strucutes that allow us to run code repeateldly

/*********************************************
 *               WHILE LOOPS
 *********************************************/


A while loop will run WHILE a certain condition is true
while (condition) {
 code runs.
}


/*********************************************
 *               DO-WHILE LOOPS
 *********************************************/
// A do/while loop will run at least once.

// do {
//  Code to be run.
// } while (condition)

/*********************************************
 *               FOR-LOOPS
 *********************************************/

// For loops: Loops that are designed to run a given number of times.
// Like a while loop but with the Var included
initializaiton of variable
condition
incrementation

// for (/*initialization*/; /*condition*/; /*increment*/) {
// 	// body
// }

example :
for (var i = 0; i < 10; i++){
  console.log(i);
}

FizzBuzz


for (var i = 0; i < 101; i++){

  var div3 = (i % 3);
  var div5 = (i % 5);
  if ( i % 15 === 0){
    console.log( i + " FizzBuzz");
  }
  else if(div3 ===0){
    console.log(i + " Fizz");
  }else if(div5 ===0){
    console.log(i + " Buzz");
  }else {console.log(i)}
}

/*********************************************
 *              BREAKS & CONTINUES
 *********************************************/
// We can get a loop to stop using break;

var numberToStopAt = 5;

for (var i = 1; i < 100; i++) {

	console.log('Loop counter is: ' + i);

	if (i === numberToStopAt) {
		console.log('We have reached the stopping point: break!');
		// use the break keyword to exit from the while loop
		break;
		// nothing after the break will get processed
		console.log('You will never see this line.');
	}
}

// We can get an iteration to skip using continue;
for (var i = 1; i < 100; i++) {

	if (i % 2 !== 0) {
		// skipping all odd numbers;
		continue;
	}

	console.log('Here is a lovely even number: ' + i);
}



/*********************************************
 *      Team Projects With Git and Github
 *********************************************/




Setting up A Project
One team member will do the following

create an organization
add team members to it
give the team members priveleges on the repository
create a repository and push existing code up
The other team members will

clone the repository
All team members will

create branches for the features they will be working on
open pull requests for those branches
not commit on or push the master branch
Pull Requests
When working in teams, it is very helpful to have a formal process around merging changes into master. While it might be tempting, in a team environment, you should not make any changes to the master branch, instead we will create separate branches to do our work in, and merge them into master.

A pull request is a formal process for merging a branch. A pull request should be for a specific feature, and the pull request should contain the following information:

what changes were made
why those changes were made
a description of any conflicts or changes to existing work
the implications of merging this branch
for example, will your teamates need to re-migrate their database?
To merge your branch into master:

Push your branch to github
Create a pull request for your branch
Ask a team member to look over the pull request
Make any changes necessary after the pull request has been reviewed
Have a team member merge your pull request
Common Questions/Problems
How do I get the most recent changes to the project?

Make sure you have commited any changes to anything you are currently working on.
Switch to your master branch.
Pull the changes from origin/master
Switch back to your branch
Merge master into your branch
After opening a pull request, github says this branch can't be automatically merged

This most likely means your branch is behind the current master branch.

Swith to your master branch
Pull the changes from origin/master
Switch to the branch you just opened a pull request for
Merge master into your branch
Solve any conflicts that arise from the merge
Push your branch up to github
Now github should say that you are able to merge your branch.

/*********************************************
 *    ARRAYS
 *********************************************/
 ● An array is a list and holds values
 ● Arrays are denoted by square brackets []
 ● The items in an array are called elements
 ● Elements are separated by commas
 ● Arrays are 0 indexed

An array is a data structure that holds an ordered list of items. Each slot in a JavaScript array can hold any type of data.
*****Counting Array Items
To find out how many items are in an array, you can use the length property. Here is an example:


*
var shapes = ['square', 'rectangle', 'circle', 'triangle'];

console.log(shapes.length); // 4
*


*****Iterating Arrays
    To iterate means to repeat a process to achieve a desired result. When you iterate over an array, it means that you cycle/traverse through the indices and elements of the array. We can use the looping statements we learned earlier to iterate through arrays in JavaScript.

Iterating Arrays -

For Loop
*
for(initial variable; condition; increment) {
// body statement here
}
for(var i = 0; i < 10; i++) {
console.log(array[i]);
}
*

Iterating Arrays -
For Each Loop
*
someArray.forEach(function(element, index, array) {
// body statement
})
movies.forEach(function(movie, index, db) {
// element = movie, index = index,
*

Iterating Arrays -
*
For Each Loop
movies.forEach(function(element, index, array) {
console.log(element); // the value in this element
console.log(index); // current index (0, 1, 2, etc)
console.log(array); // the full Array (movies)
})
*


Iterating Arrays -
For Each Loop (Pluralizing)
*
// pluralize the array, singularize the element
// movies - array / movie - element
movies.forEach(function(movie) {
console.log(movie + “ is a great movie!”);
})
*

.forEachLoops
*Syntax*
arr.forEach(callback(currentValue [, index [, array]])[, thisArg])
Parameters
callback
Function to execute on each element. It accepts between one and three arguments:
currentValue
The current element being processed in the array.
index Optional
The index currentValue in the array.
array Optional
The array forEach() was called upon.
thisArg Optional
Value to use as this when executing callback.
*

For Loop VS. For Each Loop

FOR LOOP
● PROS: Variety of options
● CONS: More complicated syntax
● USE: When you need to iterate
partially or backwards through an
array

FOR EACH LOOP
● PROS: Simpler syntax
● CONS: Can only iterate through
entire array
● USE: When you need to iterate
through entire array


/*********************************************
 * Manipulating Arrays *
 *********************************************/

*****Adding Elements
    push : add item to the end of an array
*
 var daysOfTheWeek= ['Monday','Tuesday','Wednesday','Thursday','Friday'];
 daysOfTheWeek.push('Friday');
 *

    unshift : add item to the beginning of an array
*
    var daysOfTheWeek = ['Monday', 'Tuesday',
    'Wednesday', 'Thursday', 'Friday'];
    daysOfTheWeek.unshift('Sunday');
*

*****Removing Elemnets
    pop : remove last item of an array
*
var daysOfTheWeek = ['Monday', 'Tuesday',
'Wednesday', 'Thursday', 'Friday'];
var lastDay = daysOfTheWeek.pop();
// console.log(lastDay) => Friday
*

    shift : remove first item of an array
*
var daysOfTheWeek = ['Monday', 'Tuesday',
'Wednesday', 'Thursday'];
var firstDay = daysOfTheWeek.shift();
// console.log(lastDay) => Monday
*

*****Locating Elements
    indexOf : first occurrence of item in array
*
var colors = ['red', 'green', 'blue', 'orange',
'red'];
var index = colors.indexOf('red');
// console.log(index) => 0
*

    lastIndexOf : last occurrence of item in array
*
var colors = ['red', 'green', 'blue', 'orange',
'red'];
var index = colors.lastIndexOf('red');
// console.log(index) => 4
*

*****Slicing Arrays : Copy a portion of an array
slice(x,y) : copy array elements from
index x to y

*
var temps = [42, 49, 51, 47, 62];
 var someTemps = temps.slice(2,4); // 2 through 4 //
 // console.log(someTemps) => [51, 47, 62]
 *

***Reversing Arrays : Flip it around
* original
var temps = [62, 47, 51, 49, 42];
temps.reverse();
* after
var temps = [42, 49, 51, 47, 62];
*

Sorting Arrays : Organize
* original
colors = ['red', 'green', 'blue', 'orange'];
colors.sort();
*after
var colors = ['blue', 'green', 'orange', 'red'];
//Alphabetical
*


**** Converting between String & Array
    splitting : will take a string and turn it into
    an array, using a separator
*
var nString = 'vivian,david,casey';
var nArray = nString.split(',');
into an Array
// console.log(nArray) => ['vivian', 'david', 'casey']
*
    joining : will take an array and turn it into a
    string, separating elements with a delimiter

*
var nArray = ['vivian', 'david', 'casey'];
var nString = nArray.join(',');
into Strings
// console.log(nString) => 'vivian,david,casey'
*
/*********************************************
 *  * Bill Nye Group : Kate : Ruben : Victor


 Creating a new organization:
 plus sign at top of right hand corner.
 Free option
 org account name input
 personal
 next button
 add team members
 members accepts invite
 after accept, creator will change roles to owners
 person number 1 will create a new repository
 person # 1 clone repository, should be inside of idea projects
 person # 1 will create a .idea ignore file
 (right click on directory >> new file >> .gitIgnore)
 person # will push up to master

test edit
test edit 2
test edit 3
test edit 4

test edit 5



 *********************************************/
/*********************************************
 *  * DOM * *
Direrectly works with the html documents

can call ID's with

*
 getElementByID("id")
*

can also use
*
getElementsByTagName("tag"); can add ["0"] in order to indicate which tag you want to call from the HTMLCollection array
*
will return HTMLCollection of all matching html elements.

in order to get by class
*
getElementsByClassName("className");
*

will also return as an HTMLCollective

//- -   -   -   -   -   -   -   -   -   -
The document is actually an object which you can access like you would access any other object and its attributes.
// -    -   -   -   -   -   -   -   -   -
using * .innerText = * can change the text and it actually changes the documents *
this also allows you to add text to an empty tag.

//- -   -   -   -   -   -   -   -   -   -   -
can build up html
*.innerHtml * after calling the element with getElementByTagName()[0];



//- -   -   -   -   -   -   -   -   -   -
can check it element has attribute after calling it from document.
*
.hasAttribute("nameOfAttribute");
*

can set an attribute with:

*
.setAttribute("attributeName", "value");
*

//- -   -   -   -   -   -   -   -   -   -   -
removing attributes
*
.removeAttribute("name");
*
will remove the entire attribute can not specify.
so if we wanted to change a single class on an element that has multiple classes it will erase them all not just one.


//- -   -   -   -   -   -   -   -   -   -   -
Changing styling with JS

after calling item
*.style.color*
or
* .style["color"] = "color"* : when using brackets you can use CSS names for the attributes.
//- -   -   -   -   -   -   -

 *********************************************/
 * * * Dom Events

 First you must register the eventListener
*
 target.addEventListener(type, listener, [useCapture]);
*
// -    -   -   -   -   -   -   -   -   -
// differente types of event :

keyup (key is released)
click (mouse is clicked)
change (input loses focus after it has been modified)
submit (form is submitted)
A complete event reference can be found here:

https://developer.mozilla.org/en-US/docs/Web/Reference/Events

.eventPreventDefautl(); >> allows us to remove the default actions of a  key to do something different


 /*********************************************
  *  *

Jquery

.html: returns the HTML contents of selected element or the first element in a collection. Similar to the innerHTML property we previously covered.
.css: allows us to change CSS properties for a given element or elements. Similar to the style property previously discussed.

Using the Multiple Selector
We can use the multiple selector by separating our selectors by commas:


$("selector1, selector2, ...")
If we wanted to get all the elements with a class of important and all paragraph elements, we could use this selector:


$('.important, p')

































  *********************************************/
  /*********************************************
   *  *
   *********************************************/
  /*********************************************
   *  *
   *********************************************/
  /*********************************************
   *  *
   *********************************************/
  /*********************************************
   *  *
   *********************************************/

































































